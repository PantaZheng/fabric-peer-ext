// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	storageapi "github.com/hyperledger/fabric/extensions/storage/api"
)

type CouchDatabase struct {
	CreateDatabaseIfNotExistStub        func() error
	createDatabaseIfNotExistMutex       sync.RWMutex
	createDatabaseIfNotExistArgsForCall []struct{}
	createDatabaseIfNotExistReturns     struct {
		result1 error
	}
	createDatabaseIfNotExistReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CouchDatabase) CreateDatabaseIfNotExist() error {
	fake.createDatabaseIfNotExistMutex.Lock()
	ret, specificReturn := fake.createDatabaseIfNotExistReturnsOnCall[len(fake.createDatabaseIfNotExistArgsForCall)]
	fake.createDatabaseIfNotExistArgsForCall = append(fake.createDatabaseIfNotExistArgsForCall, struct{}{})
	fake.recordInvocation("CreateDatabaseIfNotExist", []interface{}{})
	fake.createDatabaseIfNotExistMutex.Unlock()
	if fake.CreateDatabaseIfNotExistStub != nil {
		return fake.CreateDatabaseIfNotExistStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createDatabaseIfNotExistReturns.result1
}

func (fake *CouchDatabase) CreateDatabaseIfNotExistCallCount() int {
	fake.createDatabaseIfNotExistMutex.RLock()
	defer fake.createDatabaseIfNotExistMutex.RUnlock()
	return len(fake.createDatabaseIfNotExistArgsForCall)
}

func (fake *CouchDatabase) CreateDatabaseIfNotExistReturns(result1 error) {
	fake.CreateDatabaseIfNotExistStub = nil
	fake.createDatabaseIfNotExistReturns = struct {
		result1 error
	}{result1}
}

func (fake *CouchDatabase) CreateDatabaseIfNotExistReturnsOnCall(i int, result1 error) {
	fake.CreateDatabaseIfNotExistStub = nil
	if fake.createDatabaseIfNotExistReturnsOnCall == nil {
		fake.createDatabaseIfNotExistReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createDatabaseIfNotExistReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CouchDatabase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createDatabaseIfNotExistMutex.RLock()
	defer fake.createDatabaseIfNotExistMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CouchDatabase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storageapi.CouchDatabase = new(CouchDatabase)
