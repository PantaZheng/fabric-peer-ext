// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	storageapi "github.com/hyperledger/fabric/extensions/storage/api"
)

type CouchDBProvider struct {
	CreateCouchDBStub        func(ci storageapi.CouchInstance, dbName string) (storageapi.CouchDatabase, error)
	createCouchDBMutex       sync.RWMutex
	createCouchDBArgsForCall []struct {
		ci     storageapi.CouchInstance
		dbName string
	}
	createCouchDBReturns struct {
		result1 storageapi.CouchDatabase
		result2 error
	}
	createCouchDBReturnsOnCall map[int]struct {
		result1 storageapi.CouchDatabase
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CouchDBProvider) ConnectToCouchDB(ci storageapi.CouchInstance, dbName string) (storageapi.CouchDatabase, error) {
	fake.createCouchDBMutex.Lock()
	ret, specificReturn := fake.createCouchDBReturnsOnCall[len(fake.createCouchDBArgsForCall)]
	fake.createCouchDBArgsForCall = append(fake.createCouchDBArgsForCall, struct {
		ci     storageapi.CouchInstance
		dbName string
	}{ci, dbName})
	fake.recordInvocation("ConnectToCouchDB", []interface{}{ci, dbName})
	fake.createCouchDBMutex.Unlock()
	if fake.CreateCouchDBStub != nil {
		return fake.CreateCouchDBStub(ci, dbName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCouchDBReturns.result1, fake.createCouchDBReturns.result2
}

func (fake *CouchDBProvider) CreateCouchDBCallCount() int {
	fake.createCouchDBMutex.RLock()
	defer fake.createCouchDBMutex.RUnlock()
	return len(fake.createCouchDBArgsForCall)
}

func (fake *CouchDBProvider) CreateCouchDBArgsForCall(i int) (storageapi.CouchInstance, string) {
	fake.createCouchDBMutex.RLock()
	defer fake.createCouchDBMutex.RUnlock()
	return fake.createCouchDBArgsForCall[i].ci, fake.createCouchDBArgsForCall[i].dbName
}

func (fake *CouchDBProvider) CreateCouchDBReturns(result1 storageapi.CouchDatabase, result2 error) {
	fake.CreateCouchDBStub = nil
	fake.createCouchDBReturns = struct {
		result1 storageapi.CouchDatabase
		result2 error
	}{result1, result2}
}

func (fake *CouchDBProvider) CreateCouchDBReturnsOnCall(i int, result1 storageapi.CouchDatabase, result2 error) {
	fake.CreateCouchDBStub = nil
	if fake.createCouchDBReturnsOnCall == nil {
		fake.createCouchDBReturnsOnCall = make(map[int]struct {
			result1 storageapi.CouchDatabase
			result2 error
		})
	}
	fake.createCouchDBReturnsOnCall[i] = struct {
		result1 storageapi.CouchDatabase
		result2 error
	}{result1, result2}
}

func (fake *CouchDBProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCouchDBMutex.RLock()
	defer fake.createCouchDBMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CouchDBProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
