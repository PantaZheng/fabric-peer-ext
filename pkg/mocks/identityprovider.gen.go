// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric/msp"
)

type IdentityProvider struct {
	GetDefaultSigningIdentityStub        func() (msp.SigningIdentity, error)
	getDefaultSigningIdentityMutex       sync.RWMutex
	getDefaultSigningIdentityArgsForCall []struct{}
	getDefaultSigningIdentityReturns     struct {
		result1 msp.SigningIdentity
		result2 error
	}
	getDefaultSigningIdentityReturnsOnCall map[int]struct {
		result1 msp.SigningIdentity
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *IdentityProvider) GetDefaultSigningIdentity() (msp.SigningIdentity, error) {
	fake.getDefaultSigningIdentityMutex.Lock()
	ret, specificReturn := fake.getDefaultSigningIdentityReturnsOnCall[len(fake.getDefaultSigningIdentityArgsForCall)]
	fake.getDefaultSigningIdentityArgsForCall = append(fake.getDefaultSigningIdentityArgsForCall, struct{}{})
	fake.recordInvocation("GetDefaultSigningIdentity", []interface{}{})
	fake.getDefaultSigningIdentityMutex.Unlock()
	if fake.GetDefaultSigningIdentityStub != nil {
		return fake.GetDefaultSigningIdentityStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDefaultSigningIdentityReturns.result1, fake.getDefaultSigningIdentityReturns.result2
}

func (fake *IdentityProvider) GetDefaultSigningIdentityCallCount() int {
	fake.getDefaultSigningIdentityMutex.RLock()
	defer fake.getDefaultSigningIdentityMutex.RUnlock()
	return len(fake.getDefaultSigningIdentityArgsForCall)
}

func (fake *IdentityProvider) GetDefaultSigningIdentityReturns(result1 msp.SigningIdentity, result2 error) {
	fake.GetDefaultSigningIdentityStub = nil
	fake.getDefaultSigningIdentityReturns = struct {
		result1 msp.SigningIdentity
		result2 error
	}{result1, result2}
}

func (fake *IdentityProvider) GetDefaultSigningIdentityReturnsOnCall(i int, result1 msp.SigningIdentity, result2 error) {
	fake.GetDefaultSigningIdentityStub = nil
	if fake.getDefaultSigningIdentityReturnsOnCall == nil {
		fake.getDefaultSigningIdentityReturnsOnCall = make(map[int]struct {
			result1 msp.SigningIdentity
			result2 error
		})
	}
	fake.getDefaultSigningIdentityReturnsOnCall[i] = struct {
		result1 msp.SigningIdentity
		result2 error
	}{result1, result2}
}

func (fake *IdentityProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDefaultSigningIdentityMutex.RLock()
	defer fake.getDefaultSigningIdentityMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *IdentityProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
