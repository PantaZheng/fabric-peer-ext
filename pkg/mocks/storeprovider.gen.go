// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	storeapi "github.com/hyperledger/fabric/extensions/collections/api/store"
)

type StoreProvider struct {
	StoreForChannelStub        func(channelID string) storeapi.Store
	storeForChannelMutex       sync.RWMutex
	storeForChannelArgsForCall []struct {
		channelID string
	}
	storeForChannelReturns struct {
		result1 storeapi.Store
	}
	storeForChannelReturnsOnCall map[int]struct {
		result1 storeapi.Store
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *StoreProvider) StoreForChannel(channelID string) storeapi.Store {
	fake.storeForChannelMutex.Lock()
	ret, specificReturn := fake.storeForChannelReturnsOnCall[len(fake.storeForChannelArgsForCall)]
	fake.storeForChannelArgsForCall = append(fake.storeForChannelArgsForCall, struct {
		channelID string
	}{channelID})
	fake.recordInvocation("StoreForChannel", []interface{}{channelID})
	fake.storeForChannelMutex.Unlock()
	if fake.StoreForChannelStub != nil {
		return fake.StoreForChannelStub(channelID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.storeForChannelReturns.result1
}

func (fake *StoreProvider) StoreForChannelCallCount() int {
	fake.storeForChannelMutex.RLock()
	defer fake.storeForChannelMutex.RUnlock()
	return len(fake.storeForChannelArgsForCall)
}

func (fake *StoreProvider) StoreForChannelArgsForCall(i int) string {
	fake.storeForChannelMutex.RLock()
	defer fake.storeForChannelMutex.RUnlock()
	return fake.storeForChannelArgsForCall[i].channelID
}

func (fake *StoreProvider) StoreForChannelReturns(result1 storeapi.Store) {
	fake.StoreForChannelStub = nil
	fake.storeForChannelReturns = struct {
		result1 storeapi.Store
	}{result1}
}

func (fake *StoreProvider) StoreForChannelReturnsOnCall(i int, result1 storeapi.Store) {
	fake.StoreForChannelStub = nil
	if fake.storeForChannelReturnsOnCall == nil {
		fake.storeForChannelReturnsOnCall = make(map[int]struct {
			result1 storeapi.Store
		})
	}
	fake.storeForChannelReturnsOnCall[i] = struct {
		result1 storeapi.Store
	}{result1}
}

func (fake *StoreProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.storeForChannelMutex.RLock()
	defer fake.storeForChannelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *StoreProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
