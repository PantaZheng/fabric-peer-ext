// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	gossipapi "github.com/hyperledger/fabric/extensions/gossip/api"
)

type GossipProvider struct {
	GetGossipServiceStub        func() gossipapi.GossipService
	getGossipServiceMutex       sync.RWMutex
	getGossipServiceArgsForCall []struct{}
	getGossipServiceReturns     struct {
		result1 gossipapi.GossipService
	}
	getGossipServiceReturnsOnCall map[int]struct {
		result1 gossipapi.GossipService
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *GossipProvider) GetGossipService() gossipapi.GossipService {
	fake.getGossipServiceMutex.Lock()
	ret, specificReturn := fake.getGossipServiceReturnsOnCall[len(fake.getGossipServiceArgsForCall)]
	fake.getGossipServiceArgsForCall = append(fake.getGossipServiceArgsForCall, struct{}{})
	fake.recordInvocation("GetGossipService", []interface{}{})
	fake.getGossipServiceMutex.Unlock()
	if fake.GetGossipServiceStub != nil {
		return fake.GetGossipServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getGossipServiceReturns.result1
}

func (fake *GossipProvider) GetGossipServiceCallCount() int {
	fake.getGossipServiceMutex.RLock()
	defer fake.getGossipServiceMutex.RUnlock()
	return len(fake.getGossipServiceArgsForCall)
}

func (fake *GossipProvider) GetGossipServiceReturns(result1 gossipapi.GossipService) {
	fake.GetGossipServiceStub = nil
	fake.getGossipServiceReturns = struct {
		result1 gossipapi.GossipService
	}{result1}
}

func (fake *GossipProvider) GetGossipServiceReturnsOnCall(i int, result1 gossipapi.GossipService) {
	fake.GetGossipServiceStub = nil
	if fake.getGossipServiceReturnsOnCall == nil {
		fake.getGossipServiceReturnsOnCall = make(map[int]struct {
			result1 gossipapi.GossipService
		})
	}
	fake.getGossipServiceReturnsOnCall[i] = struct {
		result1 gossipapi.GossipService
	}{result1}
}

func (fake *GossipProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getGossipServiceMutex.RLock()
	defer fake.getGossipServiceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *GossipProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
