// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/fabric-peer-ext/pkg/config/ledgerconfig/config"
)

type Validator struct {
	ValidateStub        func(key *config.Key, value *config.Value) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		key   *config.Key
		value *config.Value
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	CanValidateStub        func(key *config.Key) bool
	canValidateMutex       sync.RWMutex
	canValidateArgsForCall []struct {
		key *config.Key
	}
	canValidateReturns struct {
		result1 bool
	}
	canValidateReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Validator) Validate(key *config.Key, value *config.Value) error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		key   *config.Key
		value *config.Value
	}{key, value})
	fake.recordInvocation("Validate", []interface{}{key, value})
	fake.validateMutex.Unlock()
	if fake.ValidateStub != nil {
		return fake.ValidateStub(key, value)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.validateReturns.result1
}

func (fake *Validator) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *Validator) ValidateArgsForCall(i int) (*config.Key, *config.Value) {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return fake.validateArgsForCall[i].key, fake.validateArgsForCall[i].value
}

func (fake *Validator) ValidateReturns(result1 error) {
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *Validator) ValidateReturnsOnCall(i int, result1 error) {
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Validator) CanValidate(key *config.Key) bool {
	fake.canValidateMutex.Lock()
	ret, specificReturn := fake.canValidateReturnsOnCall[len(fake.canValidateArgsForCall)]
	fake.canValidateArgsForCall = append(fake.canValidateArgsForCall, struct {
		key *config.Key
	}{key})
	fake.recordInvocation("CanValidate", []interface{}{key})
	fake.canValidateMutex.Unlock()
	if fake.CanValidateStub != nil {
		return fake.CanValidateStub(key)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.canValidateReturns.result1
}

func (fake *Validator) CanValidateCallCount() int {
	fake.canValidateMutex.RLock()
	defer fake.canValidateMutex.RUnlock()
	return len(fake.canValidateArgsForCall)
}

func (fake *Validator) CanValidateArgsForCall(i int) *config.Key {
	fake.canValidateMutex.RLock()
	defer fake.canValidateMutex.RUnlock()
	return fake.canValidateArgsForCall[i].key
}

func (fake *Validator) CanValidateReturns(result1 bool) {
	fake.CanValidateStub = nil
	fake.canValidateReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Validator) CanValidateReturnsOnCall(i int, result1 bool) {
	fake.CanValidateStub = nil
	if fake.canValidateReturnsOnCall == nil {
		fake.canValidateReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.canValidateReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *Validator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	fake.canValidateMutex.RLock()
	defer fake.canValidateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Validator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.Validator = new(Validator)
