// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/fabric-peer-ext/pkg/config/ledgerconfig/config"
)

type ValidatorRegistry struct {
	ValidatorForKeyStub        func(key *config.Key) config.Validator
	validatorForKeyMutex       sync.RWMutex
	validatorForKeyArgsForCall []struct {
		key *config.Key
	}
	validatorForKeyReturns struct {
		result1 config.Validator
	}
	validatorForKeyReturnsOnCall map[int]struct {
		result1 config.Validator
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ValidatorRegistry) ValidatorForKey(key *config.Key) config.Validator {
	fake.validatorForKeyMutex.Lock()
	ret, specificReturn := fake.validatorForKeyReturnsOnCall[len(fake.validatorForKeyArgsForCall)]
	fake.validatorForKeyArgsForCall = append(fake.validatorForKeyArgsForCall, struct {
		key *config.Key
	}{key})
	fake.recordInvocation("ValidatorForKey", []interface{}{key})
	fake.validatorForKeyMutex.Unlock()
	if fake.ValidatorForKeyStub != nil {
		return fake.ValidatorForKeyStub(key)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.validatorForKeyReturns.result1
}

func (fake *ValidatorRegistry) ValidatorForKeyCallCount() int {
	fake.validatorForKeyMutex.RLock()
	defer fake.validatorForKeyMutex.RUnlock()
	return len(fake.validatorForKeyArgsForCall)
}

func (fake *ValidatorRegistry) ValidatorForKeyArgsForCall(i int) *config.Key {
	fake.validatorForKeyMutex.RLock()
	defer fake.validatorForKeyMutex.RUnlock()
	return fake.validatorForKeyArgsForCall[i].key
}

func (fake *ValidatorRegistry) ValidatorForKeyReturns(result1 config.Validator) {
	fake.ValidatorForKeyStub = nil
	fake.validatorForKeyReturns = struct {
		result1 config.Validator
	}{result1}
}

func (fake *ValidatorRegistry) ValidatorForKeyReturnsOnCall(i int, result1 config.Validator) {
	fake.ValidatorForKeyStub = nil
	if fake.validatorForKeyReturnsOnCall == nil {
		fake.validatorForKeyReturnsOnCall = make(map[int]struct {
			result1 config.Validator
		})
	}
	fake.validatorForKeyReturnsOnCall[i] = struct {
		result1 config.Validator
	}{result1}
}

func (fake *ValidatorRegistry) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validatorForKeyMutex.RLock()
	defer fake.validatorForKeyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ValidatorRegistry) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
