// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-protos-go/transientstore"
)

type PvtDataDistributor struct {
	DistributePrivateDataStub        func(chainID string, txID string, privateData *transientstore.TxPvtReadWriteSetWithConfigInfo, blkHt uint64) error
	distributePrivateDataMutex       sync.RWMutex
	distributePrivateDataArgsForCall []struct {
		chainID     string
		txID        string
		privateData *transientstore.TxPvtReadWriteSetWithConfigInfo
		blkHt       uint64
	}
	distributePrivateDataReturns struct {
		result1 error
	}
	distributePrivateDataReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PvtDataDistributor) DistributePrivateData(chainID string, txID string, privateData *transientstore.TxPvtReadWriteSetWithConfigInfo, blkHt uint64) error {
	fake.distributePrivateDataMutex.Lock()
	ret, specificReturn := fake.distributePrivateDataReturnsOnCall[len(fake.distributePrivateDataArgsForCall)]
	fake.distributePrivateDataArgsForCall = append(fake.distributePrivateDataArgsForCall, struct {
		chainID     string
		txID        string
		privateData *transientstore.TxPvtReadWriteSetWithConfigInfo
		blkHt       uint64
	}{chainID, txID, privateData, blkHt})
	fake.recordInvocation("DistributePrivateData", []interface{}{chainID, txID, privateData, blkHt})
	fake.distributePrivateDataMutex.Unlock()
	if fake.DistributePrivateDataStub != nil {
		return fake.DistributePrivateDataStub(chainID, txID, privateData, blkHt)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.distributePrivateDataReturns.result1
}

func (fake *PvtDataDistributor) DistributePrivateDataCallCount() int {
	fake.distributePrivateDataMutex.RLock()
	defer fake.distributePrivateDataMutex.RUnlock()
	return len(fake.distributePrivateDataArgsForCall)
}

func (fake *PvtDataDistributor) DistributePrivateDataArgsForCall(i int) (string, string, *transientstore.TxPvtReadWriteSetWithConfigInfo, uint64) {
	fake.distributePrivateDataMutex.RLock()
	defer fake.distributePrivateDataMutex.RUnlock()
	return fake.distributePrivateDataArgsForCall[i].chainID, fake.distributePrivateDataArgsForCall[i].txID, fake.distributePrivateDataArgsForCall[i].privateData, fake.distributePrivateDataArgsForCall[i].blkHt
}

func (fake *PvtDataDistributor) DistributePrivateDataReturns(result1 error) {
	fake.DistributePrivateDataStub = nil
	fake.distributePrivateDataReturns = struct {
		result1 error
	}{result1}
}

func (fake *PvtDataDistributor) DistributePrivateDataReturnsOnCall(i int, result1 error) {
	fake.DistributePrivateDataStub = nil
	if fake.distributePrivateDataReturnsOnCall == nil {
		fake.distributePrivateDataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.distributePrivateDataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *PvtDataDistributor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.distributePrivateDataMutex.RLock()
	defer fake.distributePrivateDataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PvtDataDistributor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
