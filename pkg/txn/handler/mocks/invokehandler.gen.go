// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-sdk-go/pkg/client/channel/invoke"
)

type InvokeHandler struct {
	HandleStub        func(context *invoke.RequestContext, clientContext *invoke.ClientContext)
	handleMutex       sync.RWMutex
	handleArgsForCall []struct {
		context       *invoke.RequestContext
		clientContext *invoke.ClientContext
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *InvokeHandler) Handle(context *invoke.RequestContext, clientContext *invoke.ClientContext) {
	fake.handleMutex.Lock()
	fake.handleArgsForCall = append(fake.handleArgsForCall, struct {
		context       *invoke.RequestContext
		clientContext *invoke.ClientContext
	}{context, clientContext})
	fake.recordInvocation("Handle", []interface{}{context, clientContext})
	fake.handleMutex.Unlock()
	if fake.HandleStub != nil {
		fake.HandleStub(context, clientContext)
	}
}

func (fake *InvokeHandler) HandleCallCount() int {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return len(fake.handleArgsForCall)
}

func (fake *InvokeHandler) HandleArgsForCall(i int) (*invoke.RequestContext, *invoke.ClientContext) {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return fake.handleArgsForCall[i].context, fake.handleArgsForCall[i].clientContext
}

func (fake *InvokeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *InvokeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ invoke.Handler = new(InvokeHandler)
