// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-sdk-go/pkg/common/providers/fab"
)

type DiscoveryService struct {
	GetPeersStub        func() ([]fab.Peer, error)
	getPeersMutex       sync.RWMutex
	getPeersArgsForCall []struct{}
	getPeersReturns     struct {
		result1 []fab.Peer
		result2 error
	}
	getPeersReturnsOnCall map[int]struct {
		result1 []fab.Peer
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DiscoveryService) GetPeers() ([]fab.Peer, error) {
	fake.getPeersMutex.Lock()
	ret, specificReturn := fake.getPeersReturnsOnCall[len(fake.getPeersArgsForCall)]
	fake.getPeersArgsForCall = append(fake.getPeersArgsForCall, struct{}{})
	fake.recordInvocation("GetPeers", []interface{}{})
	fake.getPeersMutex.Unlock()
	if fake.GetPeersStub != nil {
		return fake.GetPeersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getPeersReturns.result1, fake.getPeersReturns.result2
}

func (fake *DiscoveryService) GetPeersCallCount() int {
	fake.getPeersMutex.RLock()
	defer fake.getPeersMutex.RUnlock()
	return len(fake.getPeersArgsForCall)
}

func (fake *DiscoveryService) GetPeersReturns(result1 []fab.Peer, result2 error) {
	fake.GetPeersStub = nil
	fake.getPeersReturns = struct {
		result1 []fab.Peer
		result2 error
	}{result1, result2}
}

func (fake *DiscoveryService) GetPeersReturnsOnCall(i int, result1 []fab.Peer, result2 error) {
	fake.GetPeersStub = nil
	if fake.getPeersReturnsOnCall == nil {
		fake.getPeersReturnsOnCall = make(map[int]struct {
			result1 []fab.Peer
			result2 error
		})
	}
	fake.getPeersReturnsOnCall[i] = struct {
		result1 []fab.Peer
		result2 error
	}{result1, result2}
}

func (fake *DiscoveryService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPeersMutex.RLock()
	defer fake.getPeersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DiscoveryService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fab.DiscoveryService = new(DiscoveryService)
