// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-sdk-go/pkg/client/channel"
	"github.com/hyperledger/fabric-sdk-go/pkg/client/channel/invoke"
)

type ChannelClient struct {
	QueryStub        func(request channel.Request, options ...channel.RequestOption) (channel.Response, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		request channel.Request
		options []channel.RequestOption
	}
	queryReturns struct {
		result1 channel.Response
		result2 error
	}
	queryReturnsOnCall map[int]struct {
		result1 channel.Response
		result2 error
	}
	InvokeHandlerStub        func(handler invoke.Handler, request channel.Request, options ...channel.RequestOption) (channel.Response, error)
	invokeHandlerMutex       sync.RWMutex
	invokeHandlerArgsForCall []struct {
		handler invoke.Handler
		request channel.Request
		options []channel.RequestOption
	}
	invokeHandlerReturns struct {
		result1 channel.Response
		result2 error
	}
	invokeHandlerReturnsOnCall map[int]struct {
		result1 channel.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ChannelClient) Query(request channel.Request, options ...channel.RequestOption) (channel.Response, error) {
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		request channel.Request
		options []channel.RequestOption
	}{request, options})
	fake.recordInvocation("Query", []interface{}{request, options})
	fake.queryMutex.Unlock()
	if fake.QueryStub != nil {
		return fake.QueryStub(request, options...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryReturns.result1, fake.queryReturns.result2
}

func (fake *ChannelClient) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *ChannelClient) QueryArgsForCall(i int) (channel.Request, []channel.RequestOption) {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return fake.queryArgsForCall[i].request, fake.queryArgsForCall[i].options
}

func (fake *ChannelClient) QueryReturns(result1 channel.Response, result2 error) {
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 channel.Response
		result2 error
	}{result1, result2}
}

func (fake *ChannelClient) QueryReturnsOnCall(i int, result1 channel.Response, result2 error) {
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 channel.Response
			result2 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 channel.Response
		result2 error
	}{result1, result2}
}

func (fake *ChannelClient) InvokeHandler(handler invoke.Handler, request channel.Request, options ...channel.RequestOption) (channel.Response, error) {
	fake.invokeHandlerMutex.Lock()
	ret, specificReturn := fake.invokeHandlerReturnsOnCall[len(fake.invokeHandlerArgsForCall)]
	fake.invokeHandlerArgsForCall = append(fake.invokeHandlerArgsForCall, struct {
		handler invoke.Handler
		request channel.Request
		options []channel.RequestOption
	}{handler, request, options})
	fake.recordInvocation("InvokeHandler", []interface{}{handler, request, options})
	fake.invokeHandlerMutex.Unlock()
	if fake.InvokeHandlerStub != nil {
		return fake.InvokeHandlerStub(handler, request, options...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.invokeHandlerReturns.result1, fake.invokeHandlerReturns.result2
}

func (fake *ChannelClient) InvokeHandlerCallCount() int {
	fake.invokeHandlerMutex.RLock()
	defer fake.invokeHandlerMutex.RUnlock()
	return len(fake.invokeHandlerArgsForCall)
}

func (fake *ChannelClient) InvokeHandlerArgsForCall(i int) (invoke.Handler, channel.Request, []channel.RequestOption) {
	fake.invokeHandlerMutex.RLock()
	defer fake.invokeHandlerMutex.RUnlock()
	return fake.invokeHandlerArgsForCall[i].handler, fake.invokeHandlerArgsForCall[i].request, fake.invokeHandlerArgsForCall[i].options
}

func (fake *ChannelClient) InvokeHandlerReturns(result1 channel.Response, result2 error) {
	fake.InvokeHandlerStub = nil
	fake.invokeHandlerReturns = struct {
		result1 channel.Response
		result2 error
	}{result1, result2}
}

func (fake *ChannelClient) InvokeHandlerReturnsOnCall(i int, result1 channel.Response, result2 error) {
	fake.InvokeHandlerStub = nil
	if fake.invokeHandlerReturnsOnCall == nil {
		fake.invokeHandlerReturnsOnCall = make(map[int]struct {
			result1 channel.Response
			result2 error
		})
	}
	fake.invokeHandlerReturnsOnCall[i] = struct {
		result1 channel.Response
		result2 error
	}{result1, result2}
}

func (fake *ChannelClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	fake.invokeHandlerMutex.RLock()
	defer fake.invokeHandlerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ChannelClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
