// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/fabric-peer-ext/pkg/txn/api"
)

type ProposalResponseValidatorProvider struct {
	ValidatorForChannelStub        func(channelID string) api.ProposalResponseValidator
	validatorForChannelMutex       sync.RWMutex
	validatorForChannelArgsForCall []struct {
		channelID string
	}
	validatorForChannelReturns struct {
		result1 api.ProposalResponseValidator
	}
	validatorForChannelReturnsOnCall map[int]struct {
		result1 api.ProposalResponseValidator
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProposalResponseValidatorProvider) ValidatorForChannel(channelID string) api.ProposalResponseValidator {
	fake.validatorForChannelMutex.Lock()
	ret, specificReturn := fake.validatorForChannelReturnsOnCall[len(fake.validatorForChannelArgsForCall)]
	fake.validatorForChannelArgsForCall = append(fake.validatorForChannelArgsForCall, struct {
		channelID string
	}{channelID})
	fake.recordInvocation("ValidatorForChannel", []interface{}{channelID})
	fake.validatorForChannelMutex.Unlock()
	if fake.ValidatorForChannelStub != nil {
		return fake.ValidatorForChannelStub(channelID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.validatorForChannelReturns.result1
}

func (fake *ProposalResponseValidatorProvider) ValidatorForChannelCallCount() int {
	fake.validatorForChannelMutex.RLock()
	defer fake.validatorForChannelMutex.RUnlock()
	return len(fake.validatorForChannelArgsForCall)
}

func (fake *ProposalResponseValidatorProvider) ValidatorForChannelArgsForCall(i int) string {
	fake.validatorForChannelMutex.RLock()
	defer fake.validatorForChannelMutex.RUnlock()
	return fake.validatorForChannelArgsForCall[i].channelID
}

func (fake *ProposalResponseValidatorProvider) ValidatorForChannelReturns(result1 api.ProposalResponseValidator) {
	fake.ValidatorForChannelStub = nil
	fake.validatorForChannelReturns = struct {
		result1 api.ProposalResponseValidator
	}{result1}
}

func (fake *ProposalResponseValidatorProvider) ValidatorForChannelReturnsOnCall(i int, result1 api.ProposalResponseValidator) {
	fake.ValidatorForChannelStub = nil
	if fake.validatorForChannelReturnsOnCall == nil {
		fake.validatorForChannelReturnsOnCall = make(map[int]struct {
			result1 api.ProposalResponseValidator
		})
	}
	fake.validatorForChannelReturnsOnCall[i] = struct {
		result1 api.ProposalResponseValidator
	}{result1}
}

func (fake *ProposalResponseValidatorProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validatorForChannelMutex.RLock()
	defer fake.validatorForChannelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProposalResponseValidatorProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
