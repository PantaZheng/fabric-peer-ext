// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric/core/chaincode/lifecycle"
)

type LifecycleCCInfoProvider struct {
	ChaincodeInfoStub        func(channelID, name string) (*lifecycle.LocalChaincodeInfo, error)
	chaincodeInfoMutex       sync.RWMutex
	chaincodeInfoArgsForCall []struct {
		channelID string
		name      string
	}
	chaincodeInfoReturns struct {
		result1 *lifecycle.LocalChaincodeInfo
		result2 error
	}
	chaincodeInfoReturnsOnCall map[int]struct {
		result1 *lifecycle.LocalChaincodeInfo
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LifecycleCCInfoProvider) ChaincodeInfo(channelID string, name string) (*lifecycle.LocalChaincodeInfo, error) {
	fake.chaincodeInfoMutex.Lock()
	ret, specificReturn := fake.chaincodeInfoReturnsOnCall[len(fake.chaincodeInfoArgsForCall)]
	fake.chaincodeInfoArgsForCall = append(fake.chaincodeInfoArgsForCall, struct {
		channelID string
		name      string
	}{channelID, name})
	fake.recordInvocation("ChaincodeInfo", []interface{}{channelID, name})
	fake.chaincodeInfoMutex.Unlock()
	if fake.ChaincodeInfoStub != nil {
		return fake.ChaincodeInfoStub(channelID, name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.chaincodeInfoReturns.result1, fake.chaincodeInfoReturns.result2
}

func (fake *LifecycleCCInfoProvider) ChaincodeInfoCallCount() int {
	fake.chaincodeInfoMutex.RLock()
	defer fake.chaincodeInfoMutex.RUnlock()
	return len(fake.chaincodeInfoArgsForCall)
}

func (fake *LifecycleCCInfoProvider) ChaincodeInfoArgsForCall(i int) (string, string) {
	fake.chaincodeInfoMutex.RLock()
	defer fake.chaincodeInfoMutex.RUnlock()
	return fake.chaincodeInfoArgsForCall[i].channelID, fake.chaincodeInfoArgsForCall[i].name
}

func (fake *LifecycleCCInfoProvider) ChaincodeInfoReturns(result1 *lifecycle.LocalChaincodeInfo, result2 error) {
	fake.ChaincodeInfoStub = nil
	fake.chaincodeInfoReturns = struct {
		result1 *lifecycle.LocalChaincodeInfo
		result2 error
	}{result1, result2}
}

func (fake *LifecycleCCInfoProvider) ChaincodeInfoReturnsOnCall(i int, result1 *lifecycle.LocalChaincodeInfo, result2 error) {
	fake.ChaincodeInfoStub = nil
	if fake.chaincodeInfoReturnsOnCall == nil {
		fake.chaincodeInfoReturnsOnCall = make(map[int]struct {
			result1 *lifecycle.LocalChaincodeInfo
			result2 error
		})
	}
	fake.chaincodeInfoReturnsOnCall[i] = struct {
		result1 *lifecycle.LocalChaincodeInfo
		result2 error
	}{result1, result2}
}

func (fake *LifecycleCCInfoProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.chaincodeInfoMutex.RLock()
	defer fake.chaincodeInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LifecycleCCInfoProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
