// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/fabric-peer-ext/pkg/gossip/appdata"
)

type AppDataHandlerProvider struct {
	HandlerForTypeStub        func(dataType string) (appdata.Handler, bool)
	handlerForTypeMutex       sync.RWMutex
	handlerForTypeArgsForCall []struct {
		dataType string
	}
	handlerForTypeReturns struct {
		result1 appdata.Handler
		result2 bool
	}
	handlerForTypeReturnsOnCall map[int]struct {
		result1 appdata.Handler
		result2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AppDataHandlerProvider) HandlerForType(dataType string) (appdata.Handler, bool) {
	fake.handlerForTypeMutex.Lock()
	ret, specificReturn := fake.handlerForTypeReturnsOnCall[len(fake.handlerForTypeArgsForCall)]
	fake.handlerForTypeArgsForCall = append(fake.handlerForTypeArgsForCall, struct {
		dataType string
	}{dataType})
	fake.recordInvocation("HandlerForType", []interface{}{dataType})
	fake.handlerForTypeMutex.Unlock()
	if fake.HandlerForTypeStub != nil {
		return fake.HandlerForTypeStub(dataType)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.handlerForTypeReturns.result1, fake.handlerForTypeReturns.result2
}

func (fake *AppDataHandlerProvider) HandlerForTypeCallCount() int {
	fake.handlerForTypeMutex.RLock()
	defer fake.handlerForTypeMutex.RUnlock()
	return len(fake.handlerForTypeArgsForCall)
}

func (fake *AppDataHandlerProvider) HandlerForTypeArgsForCall(i int) string {
	fake.handlerForTypeMutex.RLock()
	defer fake.handlerForTypeMutex.RUnlock()
	return fake.handlerForTypeArgsForCall[i].dataType
}

func (fake *AppDataHandlerProvider) HandlerForTypeReturns(result1 appdata.Handler, result2 bool) {
	fake.HandlerForTypeStub = nil
	fake.handlerForTypeReturns = struct {
		result1 appdata.Handler
		result2 bool
	}{result1, result2}
}

func (fake *AppDataHandlerProvider) HandlerForTypeReturnsOnCall(i int, result1 appdata.Handler, result2 bool) {
	fake.HandlerForTypeStub = nil
	if fake.handlerForTypeReturnsOnCall == nil {
		fake.handlerForTypeReturnsOnCall = make(map[int]struct {
			result1 appdata.Handler
			result2 bool
		})
	}
	fake.handlerForTypeReturnsOnCall[i] = struct {
		result1 appdata.Handler
		result2 bool
	}{result1, result2}
}

func (fake *AppDataHandlerProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handlerForTypeMutex.RLock()
	defer fake.handlerForTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AppDataHandlerProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
