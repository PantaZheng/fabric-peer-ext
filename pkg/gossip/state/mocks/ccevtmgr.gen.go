// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric/extensions/chaincode/api"
)

type CCEventMgr struct {
	HandleChaincodeDeployStub        func(channelID string, ccDefs []*api.Definition) error
	handleChaincodeDeployMutex       sync.RWMutex
	handleChaincodeDeployArgsForCall []struct {
		channelID string
		ccDefs    []*api.Definition
	}
	handleChaincodeDeployReturns struct {
		result1 error
	}
	handleChaincodeDeployReturnsOnCall map[int]struct {
		result1 error
	}
	ChaincodeDeployDoneStub        func(channelID string)
	chaincodeDeployDoneMutex       sync.RWMutex
	chaincodeDeployDoneArgsForCall []struct {
		channelID string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CCEventMgr) HandleChaincodeDeploy(channelID string, ccDefs []*api.Definition) error {
	var ccDefsCopy []*api.Definition
	if ccDefs != nil {
		ccDefsCopy = make([]*api.Definition, len(ccDefs))
		copy(ccDefsCopy, ccDefs)
	}
	fake.handleChaincodeDeployMutex.Lock()
	ret, specificReturn := fake.handleChaincodeDeployReturnsOnCall[len(fake.handleChaincodeDeployArgsForCall)]
	fake.handleChaincodeDeployArgsForCall = append(fake.handleChaincodeDeployArgsForCall, struct {
		channelID string
		ccDefs    []*api.Definition
	}{channelID, ccDefsCopy})
	fake.recordInvocation("HandleChaincodeDeploy", []interface{}{channelID, ccDefsCopy})
	fake.handleChaincodeDeployMutex.Unlock()
	if fake.HandleChaincodeDeployStub != nil {
		return fake.HandleChaincodeDeployStub(channelID, ccDefs)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.handleChaincodeDeployReturns.result1
}

func (fake *CCEventMgr) HandleChaincodeDeployCallCount() int {
	fake.handleChaincodeDeployMutex.RLock()
	defer fake.handleChaincodeDeployMutex.RUnlock()
	return len(fake.handleChaincodeDeployArgsForCall)
}

func (fake *CCEventMgr) HandleChaincodeDeployArgsForCall(i int) (string, []*api.Definition) {
	fake.handleChaincodeDeployMutex.RLock()
	defer fake.handleChaincodeDeployMutex.RUnlock()
	return fake.handleChaincodeDeployArgsForCall[i].channelID, fake.handleChaincodeDeployArgsForCall[i].ccDefs
}

func (fake *CCEventMgr) HandleChaincodeDeployReturns(result1 error) {
	fake.HandleChaincodeDeployStub = nil
	fake.handleChaincodeDeployReturns = struct {
		result1 error
	}{result1}
}

func (fake *CCEventMgr) HandleChaincodeDeployReturnsOnCall(i int, result1 error) {
	fake.HandleChaincodeDeployStub = nil
	if fake.handleChaincodeDeployReturnsOnCall == nil {
		fake.handleChaincodeDeployReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleChaincodeDeployReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CCEventMgr) ChaincodeDeployDone(channelID string) {
	fake.chaincodeDeployDoneMutex.Lock()
	fake.chaincodeDeployDoneArgsForCall = append(fake.chaincodeDeployDoneArgsForCall, struct {
		channelID string
	}{channelID})
	fake.recordInvocation("ChaincodeDeployDone", []interface{}{channelID})
	fake.chaincodeDeployDoneMutex.Unlock()
	if fake.ChaincodeDeployDoneStub != nil {
		fake.ChaincodeDeployDoneStub(channelID)
	}
}

func (fake *CCEventMgr) ChaincodeDeployDoneCallCount() int {
	fake.chaincodeDeployDoneMutex.RLock()
	defer fake.chaincodeDeployDoneMutex.RUnlock()
	return len(fake.chaincodeDeployDoneArgsForCall)
}

func (fake *CCEventMgr) ChaincodeDeployDoneArgsForCall(i int) string {
	fake.chaincodeDeployDoneMutex.RLock()
	defer fake.chaincodeDeployDoneMutex.RUnlock()
	return fake.chaincodeDeployDoneArgsForCall[i].channelID
}

func (fake *CCEventMgr) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleChaincodeDeployMutex.RLock()
	defer fake.handleChaincodeDeployMutex.RUnlock()
	fake.chaincodeDeployDoneMutex.RLock()
	defer fake.chaincodeDeployDoneMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CCEventMgr) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
